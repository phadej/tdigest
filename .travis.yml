# Adopted from: https://github.com/haskell/hackage-security/blob/617322bfc5b54b9e208652b6e4ee1dcd7b9edc28/.travis.yml
language: c
sudo: false

branches:
  only:
    - master

git:
  submodules: false  # whether to recursively clone submodules

cache:
  directories:
    - $HOME/.cabal/packages
    - $HOME/.cabal/store

before_cache:
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/build-reports.log
  # remove files that are regenerated by 'cabal update'
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/00-index.*
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/*.json
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/01-index.cache
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/01-index.tar
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/01-index.tar.idx

matrix:
  include:
    - compiler: "ghc-7.8.4"
    # env: TEST=--disable-tests BENCH=--disable-benchmarks
      addons: {apt: {packages: [ghc-ppa-tools,cabal-install-head,ghc-7.8.4], sources: [hvr-ghc]}}
    - compiler: "ghc-7.10.3"
    # env: TEST=--disable-tests BENCH=--disable-benchmarks
      addons: {apt: {packages: [ghc-ppa-tools,cabal-install-head,ghc-7.10.3], sources: [hvr-ghc]}}
    - compiler: "ghc-8.0.1"
    # env: TEST=--disable-tests BENCH=--disable-benchmarks
      addons: {apt: {packages: [ghc-ppa-tools,cabal-install-head,ghc-8.0.1], sources: [hvr-ghc]}}
    - compiler: "ghc-8.0.2"
    # env: TEST=--disable-tests BENCH=--disable-benchmarks
      addons: {apt: {packages: [ghc-ppa-tools,cabal-install-head,ghc-8.0.2], sources: [hvr-ghc]}}
    - compiler: "ghc-8.2.1"
    # env: TEST=--disable-tests BENCH=--disable-benchmarks
      addons: {apt: {packages: [ghc-ppa-tools,cabal-install-head,ghc-8.2.1], sources: [hvr-ghc]}}

before_install:
 - HC=${CC}
 - unset CC
 - PATH=/opt/ghc/bin:/opt/ghc-ppa-tools/bin:$PATH

install:
 - cabal --version
 - echo "$(${HC} --version) [$(${HC} --print-project-git-commit-id 2> /dev/null || echo '?')]"
 - BENCH=${BENCH---enable-benchmarks}
 - TEST=${TEST---enable-tests}
 - travis_retry cabal update -v
 - sed -i 's/^jobs:/-- jobs:/' ${HOME}/.cabal/config
 - rm -fv cabal.project.local
 - rm -fv cabal.project.freeze

# Here starts the actual work to be performed for the package under test;
# any command which exits with a non-zero exit code causes the build to fail.
script:
 # prepare `cabal sdist` source-tree environment to make sure source-tarballs are complete
 - read -a PKGS <<< "tdigest tdigest-Chart tdigest-bench"
 - rm -rf sdists; mkdir sdists
 - for PKG in "${PKGS[@]}"; do
     cd "$PKG"; cabal sdist --output-directory="../sdists/$PKG" || break; cd ..;
   done
 - cd sdists/

 # First build only tdigest package
 - "echo packages: tdigest > cabal.project"
 - cabal new-build -w ${HC} --disable-tests --disable-benchmarks all
 - cabal new-build -w ${HC} --enable-tests --disable-benchmarks all
 - $(find dist-newstyle -type f -executable -name tdigest-tests | head -n 1)
 - $(find dist-newstyle -type f -executable -name doctests | head -n 1)

 # Then we build tdigest and tdigest-Chart
 - if [ ! ${HC} = "ghc-8.2.1" ]; then echo packages: tdigest tdigest-Chart > cabal.project"; fi
 - cabal new-build -w ${HC} --disable-tests --disable-benchmarks all
 - cabal new-build -w ${HC} --enable-tests --disable-benchmarks All
 - $(find dist-newstyle -type f -executable -name tdigest-tests | head -n 1)
 - $(find dist-newstyle -type f -executable -name doctests | head -n 1)

 # Then we build also tdigest-bench
 - "echo packages: tdigest tdigest-Chart tdigest-bench > cabal.project"
 - "cabal new-build -w ${HC} tdigest-bench:tdigest-simple"
 - $(find dist-newstyle -type f -executable -name tdigest-simple | head -n 1)
